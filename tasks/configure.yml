---
- name: inherit interfaces
  set_fact:
    dhcpd_interface: "{{ lan_if }}"
  when: lan_if is defined

- name: use default interface
  set_fact:
    dhcpd_interface: "{{ ansible_default_ipv4.interface }}"
  when: dhcpd_interface is not defined


- name: setup daemontools for dhcpd
  block:
    - name: set service directory tree
      file:
        path: "{{ item.path }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
        state: directory
      loop: "{{ dhcpd_directories }}"

    - template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: "{{ root_group }}"
        mode: "{{ item.mode }}"
      loop:
        - { src: svscan/run, dest: "{{ dhcpd_svscan_dir }}/run", mode: "0750" }
        - { src: svscan/log/run, dest: "{{ dhcpd_svscan_log_dir }}/run", mode: "0750" }

    - name: create lease file
      copy:
        content: ""
        dest: "{{ dhcpd_lease_file }}"
        force: no
        owner: "{{ dhcpd_user }}"
        mode: 0600

    - name: link svscan
      file:
        src: "{{ dhcpd_svscan_dir }}"
        dest: "{{ daemontools_svscan_dir }}/dhcpd"
        state: link

  when: has_daemontools


- include_tasks: dhcpkit.yml
  when: want_dhcpkit

- include_tasks: dhcpd_conf.yml
  when: not want_dhcpkit


- name: setup FreeBSD newsyslog
  template:
    src: newsyslog.conf.d/dhcpd.conf
    dest: "{{ newsyslog_conf_dir }}/dhcpd.conf"
    owner: root
    group: "{{ root_group }}"
    mode: '0644'
  when: ansible_system == 'FreeBSD'


- name: start standard service
  block:
    - name: enable standard FreeBSD service
      include: sysrc.yml key="{{ item }}_enable" value="YES"
      loop: "{{ dhcpd_services_sysrcs[dhcpd_mode] }}"
      when: ansible_system == 'FreeBSD'

    - name: enable standard Linux service
      service:
        name: "{{ item }}"
        enabled: true
      loop: "{{ dhcpd_services[dhcpd_mode] }}"
      when: ansible_system == 'Linux'

    - service:
        name: "{{ item }}"
        state: started
      loop: "{{ dhcpd_services[dhcpd_mode] }}"
      register: t_dhcpd_service

    - service:
        name: "{{ item }}"
        state: restarted
      loop: "{{ dhcpd_services[dhcpd_mode] }}"
      when: t_dhcpd_conf.changed and not t_dhcpd_service.changed

  when: has_daemontools is not defined or not has_daemontools
